add_subdirectory(p4est)
if (${P4EST_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${P4EST_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${P4EST_LIB})
else()
    message(STATUS "Required external package `p4est` not ready:")
    message(STATUS "  P4EST_FOUND = " ${P4EST_FOUND})
    message(FATAL_ERROR "Required external package `p4est` not ready...")
endif()

add_subdirectory(petsc)
if (${PETSC_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${PETSC_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${PETSC_LIB})
    target_compile_definitions(common INTERFACE USE_PETSC)
else()
    message(STATUS "Required external package `petsc` not ready:")
    message(STATUS "  PETSC_FOUND = " ${PETSC_FOUND})
    message(FATAL_ERROR "Required external package `petsc` not ready...")
endif()

add_subdirectory(ForestClaw)
if(${FORESTCLAW_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${FORESTCLAW_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${FORESTCLAW_LIB})
else()
    message(STATUS "Required external package `ForestClaw` not ready:")
    message(STATUS "  FORESTCLAW_FOUND = " ${FORESTCLAW_FOUND})
    message(FATAL_ERROR "Required external packages `ForestClaw` not ready...")
endif()

add_subdirectory(EllipticForest)
if(${ELLIPTICFOREST_FOUND})
    list(APPEND LIST_EXTERNAL_PKGS_INCLUDE ${ELLIPTICFOREST_INCLUDE})
    list(APPEND LIST_EXTERNAL_PKGS_LIB ${ELLIPTICFOREST_LIB})
else()
    message(STATUS "Required external package `EllipticForest` not ready:")
    message(STATUS "  ELLIPTICFOREST_FOUND = " ${ELLIPTICFOREST_FOUND})
    message(FATAL_ERROR "Required external packages `EllipticForest` not ready...")
endif()

set(EXTERNAL_PKGS_INCLUDE ${LIST_EXTERNAL_PKGS_INCLUDE} CACHE INTERNAL "External packages include directories")
set(EXTERNAL_PKGS_LIB ${LIST_EXTERNAL_PKGS_LIB} CACHE INTERNAL "External packages library directories")

message(STATUS "Done with external packages:")
message(STATUS "  EXTERNAL_PKGS_INCLUDE = ")
foreach(X ${EXTERNAL_PKGS_INCLUDE})
    message(STATUS "    " ${X})
endforeach()
message(STATUS "  EXTERNAL_PKGS_LIB = ")
foreach(X ${EXTERNAL_PKGS_LIB})
    message(STATUS "    " ${X})
endforeach()